Tower of Hanoi is a mathematical puzzle where we have three rods (A, B, and C) and N disks. Initially, 
all the disks are stacked in decreasing value of diameter i.e., the smallest disk is placed on the top and they are on rod A.
The objective of the puzzle is to move the entire stack to another rod (here considered C), obeying the following simple rules: 
Here we Consider 3 roda:
A = Source rod
B = Intermediate rod 
C = Destination rod
Our aim is to move all the rods from A to C by using B.
There are certain conditions we need tot follow:
-> Only one disk can be moved at a time.
-> Each move consists of taking the upper disk from one of the stacks and placing it on top of another stack i.e. a disk can only be moved if it is the uppermost disk on a stack.
-> No disk may be placed on top of a smaller disk.

This Problem can be easily implemented by using Recurrsion:
The idea is to use the helper node to reach the destination using recursion. Below is the pattern for this problem:
Shift ‘N-1’ disks from ‘A’ to ‘B’, using C.
Shift last disk from ‘A’ to ‘C’.
Shift ‘N-1’ disks from ‘B’ to ‘C’, using A.

Follow the below steps to easily write the algorithm.
-> create a function names towersOfHanoi(int N, char src, char dest, char inter) with parameters N, source, destination and intermediate.
-> Make a function call for N – 1 th disk.
-> Then print the current the disk along with src and dest
-> Again make a function call for N – 1 th disk.